import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:get/route_manager.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:pakaar_t2/LoginPage.dart';

import 'USERPOSTS/Post.dart';
import 'streambuilder.dart/streambuilderservcie.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  User? userid = FirebaseAuth.instance.currentUser;
  final _postController = TextEditingController();

  void _createPost() {
    final content = _postController.text.trim();
    if (content.isNotEmpty) {
      final newPost = Post(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        userId: userid!.uid,
        content: content,
        replies: [],
      );

      FirebaseFirestore.instance.collection('userPosts').doc(newPost.id).set({
        'userId': newPost.userId,
        'content': newPost.content,
        'replies': newPost.replies,
      });

      _postController.clear();
    }
  }

  void _createReply(String postId, String content) {
    final newReply = {
      'postId': postId,
      'content': content,
      // Add any other properties related to the reply
    };

    FirebaseFirestore.instance.collection('userPosts').doc(postId).update({
      'replies': FieldValue.arrayUnion([newReply]),
    });
  }

  void _showReplyBox(BuildContext context, String? postId) {
    if (postId == null) {
      return; // Do nothing if postId is null
    }

    final _replyController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Reply to Post'),
          content: Container(
            height: 200,
            child: Column(
              children: [
                Expanded(
                  child: TextFormField(
                    maxLines: null,
                    controller: _replyController,
                    decoration: InputDecoration(
                      hintText: 'Write your reply here...',
                    ),
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () {
                _createReply(postId, _replyController.text.trim());
                Navigator.of(context).pop();
              },
              child: Text('Reply'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder(
      stream: StreamBuilderService(userid!.uid).getUserDataStream(),
      builder: (context, snapshot) {
        if (!snapshot.hasData || snapshot.data == null) {
          return Center(child: CircularProgressIndicator());
        }

        String username = snapshot.data!.containsKey('userName')
            ? snapshot.data!['userName'] ?? 'Unknown'
            : 'Unknown';
        String imageUrl = snapshot.data!.containsKey('imageUrl')
            ? snapshot.data!['imageUrl'] ?? ''
            : '';

        List<Map<String, dynamic>> userPosts =
            snapshot.data!.containsKey('userPosts')
                ? List<Map<String, dynamic>>.from(snapshot.data!['userPosts'])
                : [];

        return Scaffold(
          appBar: AppBar(
            backgroundColor: Colors.white,
            title: Center(
              child: Padding(
                padding: const EdgeInsets.only(right: 24),
                child: Text(
                  "Pakaar",
                  style: TextStyle(
                    fontSize: 32,
                    fontWeight: FontWeight.w700,
                    color: Colors.black,
                  ),
                ),
              ),
            ),
            actions: [
              GestureDetector(
                onTap: () {
                  FirebaseAuth.instance.signOut();
                  Get.off(() => LoginPage());
                },
                child: Icon(
                  Icons.logout,
                  color: Colors.black,
                ),
              ),
            ],
          ),
          body: ListView.builder(
            itemCount: userPosts.length,
            itemBuilder: (context, index) {
              Map<String, dynamic> post = userPosts[index];

              List<Map<String, dynamic>> replies = post.containsKey('replies')
                  ? List<Map<String, dynamic>>.from(post['replies'])
                  : [];

              return Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.only(top: 15, left: 10),
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                        vertical: 2,
                        horizontal: 16,
                      ).copyWith(right: 0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          SizedBox(height: 1),
                          CircleAvatar(
                            radius: 20,
                            backgroundImage: imageUrl.isNotEmpty
                                ? NetworkImage(imageUrl)
                                : NetworkImage('path/to/default_image.jpg'),
                          ),
                          Expanded(
                            child: Padding(
                              padding: const EdgeInsets.only(left: 8),
                              child: Column(
                                mainAxisSize: MainAxisSize.min,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  InkWell(
                                    onTap: () {
                                      // Get.to(() => streambuilder());
                                    },
                                    child: Text(
                                      username,
                                      style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                        fontFamily: 'Epilogue',
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          SizedBox(height: 2),
                        ],
                      ),
                    ),
                  ),
                  Container(
                    height: 60,
                    width: 400,
                    decoration: BoxDecoration(
                      border: Border.all(
                        color: const Color.fromARGB(255, 255, 255, 255),
                      ),
                      borderRadius: const BorderRadius.all(Radius.circular(12)),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.only(left: 43),
                      child: Text(post['content'] ?? ''),
                    ),
                  ),

                  Padding(
                    padding: const EdgeInsets.only(left: 90),
                    child: ExpansionTile(
                      title: Text(
                        'show',
                        style: TextStyle(
                          fontSize: 10,
                          fontFamily: 'Epilogue',
                          fontWeight: FontWeight.w100,
                        ),
                      ),
                      children: [
                        ListView.builder(
                          shrinkWrap: true,
                          itemCount: replies.length,
                          itemBuilder: (context, replyIndex) {
                            Map<String, dynamic> reply = replies[replyIndex];
                            return Row(
                              children: [
                                Padding(
                                  padding: const EdgeInsets.only(left: 17),
                                  child: CircleAvatar(
                                    radius: 16,
                                    backgroundImage: NetworkImage(
                                      'https://images.pexels.com/photos/8088449/pexels-photo-8088449.jpeg?auto=compress&cs=tinysrgb&w=600',
                                    ),
                                  ),
                                ),
                                Expanded(
                                  child: Padding(
                                    padding: const EdgeInsets.only(left: 6),
                                    child: Column(
                                      mainAxisSize: MainAxisSize.min,
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          reply['userName'] ?? 'Unknown',
                                          style: TextStyle(
                                            fontWeight: FontWeight.bold,
                                            fontFamily: 'Epilogue',
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            );
                          },
                        ),
                        Padding(
                          padding: const EdgeInsets.only(left: 0),
                          child: Text(
                            'Aw G Inbox ta rashai',
                            maxLines: 20,
                          ),
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 20), // Add some spacing between each post
                ],
              );
            },
          ),
          floatingActionButton: FloatingActionButton(
            onPressed: () {
              _showPostBox(context);
            },
            child: Icon(Icons.add),
            backgroundColor: Colors.green,
          ),
        );
      },
    );
  }

  void _showPostBox(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Create Post'),
          content: Container(
            height: 200,
            child: Column(
              children: [
                Expanded(
                  child: TextFormField(
                    maxLines: null,
                    controller: _postController,
                    decoration: InputDecoration(
                      hintText: 'Write your post here...',
                    ),
                  ),
                ),
                IconButton(
                  onPressed: () {
                    // Add logic to handle image selection and upload
                  },
                  color: Colors.green,
                  icon: Icon(Icons.image),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () {
                _createPost();
                Navigator.of(context).pop();
              },
              child: Text('Post'),
            ),
          ],
        );
      },
    );
  }
}
